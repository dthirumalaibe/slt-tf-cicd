---
# Define the language and versions used. The CI system will create
# a Python virtualenv for each Python version to test it.
language: "python"
python:
  - "3.6"

# Install python packages for ansible and linters first.
# Then setup the AWS CLI using a non-interactive script with
# predefined Travis environment variables.
install:
  - "pip install -r requirements.txt"
  - "./aws/setup.sh"

# First, ensure AWS connectivity is functioning. Then,
# execute linting to catch minor errors before running the main playbook.
# Find all YAML files in the project and lint them in strict mode.
before_script:
  - "aws sts get-caller-identity"
  - "find . -name '*.yml' | xargs yamllint -s"
  - "terraform init aws/"

# Perform playbook testing with on pre-existing virtual routers.
# A more complex pipeline might deploy on-demand routers ahead of time
# using Terraform rather than assume they already exist.
script:
  - "terraform apply aws/ -auto-approve"
  - "ansible --version"
  # - "ansible-playbook test.yml"

after_script:
  # - "terraform destroy"
